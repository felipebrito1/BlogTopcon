version: '3.9'
services:
  api:
    container_name: blogtopcon_api
    build:
      context: ./src/BlogTopcon # Caminho para o diretório do Dockerfile
      dockerfile: BlogTopcon.API/Dockerfile
    ports:
      - "5000:8080"  # Mapeando a porta 8080 do contêiner para a porta 5000 do host
    environment:
      - ConnectionStrings__PostDB=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - postgres

  postgres:
    image: postgres:15
    container_name: blogtopcon_postgres
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432" # Porta configurada no .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # frontend:
  #   container_name: blogtopcon_frontend
  #   build:
  #     context: ./src/BlogTopcon.Front # Caminho para o projeto React
  #     dockerfile: Dockerfile # Nome do Dockerfile do frontend
  #   ports:
  #     - "3000:80" # Porta do React no host para acessar no navegador
  #   volumes:
  #     - ./src/BlogTopcon.Front:/app # Sincroniza o código local com o contêiner
  #     - /app/node_modules # Evita conflitos de dependências
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true # Para hot-reload funcionar corretamente no Docker
  #   stdin_open: true
  #   tty: true
  #   depends_on:
  #     - api # Aguarda a API estar disponível antes de subir o frontend

volumes:
  postgres_data:
